import math

class Solution(object):
    def getBreadthFirst(self, root):
        if root is None:
            return {}
        
        queue = [(0, root)]
        traversalHashy = defaultdict(list)
        
        while len(queue) > 0:
            level, node = queue.pop(0)
            traversalHashy[level].append(node.val)
            
            if node.left is not None:
                queue.append((level + 1, node.left))
            if node.right is not None:
                queue.append((level + 1, node.right))
        
        return traversalHashy
    
    def maxLevelSum(self, root):
        traveralHashy = self.getBreadthFirst(root)
        print("this is traversed:" + str(traveralHashy))
        j = 1
        startIndex = 0
        maxSum = root.val
        maxKey = 1
        for key in traveralHashy.keys():
            lst = traveralHashy[key]
            subSum = 0
            for root in lst: 
                subSum+=root
            if (subSum > maxSum):
                maxSum = subSum
                maxKey = key + 1

        return maxKey